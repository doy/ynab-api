/*
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.72.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SaveScheduledTransaction {
    #[serde(rename = "account_id")]
    pub account_id: uuid::Uuid,
    /// The scheduled transaction date in ISO format (e.g. 2016-12-01).
    #[serde(rename = "date")]
    pub date: String,
    /// The scheduled transaction amount in milliunits format.
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<i64>,
    /// The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
    #[serde(rename = "payee_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payee_id: Option<Option<uuid::Uuid>>,
    /// The payee name for the the scheduled transaction.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee.
    #[serde(rename = "payee_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub payee_name: Option<Option<String>>,
    /// The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
    #[serde(rename = "category_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub category_id: Option<Option<uuid::Uuid>>,
    #[serde(rename = "memo", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub memo: Option<Option<String>>,
    #[serde(rename = "flag_color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub flag_color: Option<Option<models::TransactionFlagColor>>,
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<models::ScheduledTransactionFrequency>,
}

impl SaveScheduledTransaction {
    pub fn new(account_id: uuid::Uuid, date: String) -> SaveScheduledTransaction {
        SaveScheduledTransaction {
            account_id,
            date,
            amount: None,
            payee_id: None,
            payee_name: None,
            category_id: None,
            memo: None,
            flag_color: None,
            frequency: None,
        }
    }
}

